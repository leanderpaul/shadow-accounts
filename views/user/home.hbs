<style>
  #profile .card {
    padding: 20px;
  }

  #profile .card .avatar {
    width: 75px;
    height: 75px;
  }

  #profile .form-field {
    margin: 20px 0px;
  }

  #profile .form-field label {
    display: block;
    font-size: 14px;
    color: #444;
    cursor: default;
  }

  #profile form input {
    margin-top: 10px;
  }

  #edit-lg {
    display: none;
  }

  .actions button {
    margin-top: 10px;
  }

  ul.email-addresses li {
    display: flex;
    padding: 20px 15px;
    align-items: center;
    gap: 10px;
    cursor: pointer;
  }

  ul.email-addresses li:hover {
    background-color: #fbfbfb;
  }

  ul.email-addresses .icon {
    width: 60px;
    padding: 15px;
    border-radius: 50%;
  }

  ul.email-addresses .actions > * {
    display: none;
    fill: #999;
    color: #999;
    height: 25px;
  }

  ul.email-addresses .actions span {
    margin-right: 10px;
    border: 1px solid #ccc;
    padding: 2px 10px;
    border-radius: 50px;
    height: auto;
  }

  ul.email-addresses .actions span:hover {
    border-color: #444;
    color: #222;
  }

  ul.email-addresses .actions svg:hover {
    fill: red;
  }

  #add-email {
    color: #0291ff;
    font-weight: 500;
    font-size: 16px;
  }

  #email-options .options {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin: 20px 0px;
  }

  #email-options button {
    justify-content: flex-start;
    font-weight: 500;
    font-size: 16px;
  }

  #email-options button svg {
    margin-right: 15px;
    width: 20px;
  }

  @media (min-width: 992px) {
    #profile .card {
      padding: 40px;
    }

    button {
      width: auto;
    }

    form {
      display: flex;
      flex-wrap: wrap;
      column-gap: 50px;
      max-width: 800px;
    }

    form .form-field {
      width: 40%;
      margin: 10px 0px;
    }

    #edit-lg {
      display: block;
    }

    .actions button {
      margin-top: 20px;
    }

    ul.email-addresses li {
      padding: 15px 30px;
    }

    ul.email-addresses li:hover .actions > * {
      display: block;
    }
  }
</style>

<div id="profile">
  <div class="title">Profile</div>
  <div class="card">
    <div class="flex align-center">
      <div>
        <svg class="avatar" viewBox="0 0 24 24">
          <path fill="#aaa" d="M12 19.2c-2.5 0-4.71-1.28-6-3.2.03-2 4-3.1 6-3.1s5.97 1.1 6 3.1a7.232 7.232 0 0 1-6 3.2M12 5a3 3 0 0 1 3 3 3 3 0 0 1-3 3 3 3 0 0 1-3-3 3 3 0 0 1 3-3m0-3A10 10 0 0 0 2 12a10 10 0 0 0 10 10 10 10 0 0 0 10-10c0-5.53-4.5-10-10-10z"></path>
        </svg>
      </div>
      <div id="info" class="ml-2 my-auto">
        <h1 class="bold text-2xl cursor-default">{{ user.fullName }}</h1>
        <p class="text-sm text-neutral-500">{{ user.primaryEmail }}</p>
      </div>
      <button id="edit-lg" class="btn blue ml-auto compact">Edit</button>
    </div>
    <form class="mx-2">
      <div id="firstName" class="form-field">
        <label>First Name</label>
        <span>{{ user.firstName }}</span>
        <input type="text" class="!hidden" name="firstName">
        <div class="error"></div>
      </div>
      <div id="lastName" class="form-field">
        <label>Last Name</label>
        <span>{{ user.lastName }}</span>
        <input type="text" class="!hidden" name="lastName">
        <div class="error"></div>
      </div>
      <div id="imageUrl" class="form-field hidden">
        <label>Profile Picture URL</label>
        <span class="hidden">{{ user.imageUrl }}</span>
        <input type="url" name="imageUrl">
        <div class="error"></div>
      </div>
      <div id="gender" class="form-field">
        <label>Gender</label>
        <span>{{ user.gender }}</span>
        <input class="pointer !hidden" type="text" data-current-value="{{ user.rawGender }}" readonly>
        <div class="select">
          <svg class="hidden" viewBox="0 0 24 24">
            <path d="M12 5.83 15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z"></path>
          </svg>
          <ul>
            <li data-value="1">Male</li>
            <li data-value="2">Female</li>
            <li data-value="-1">Prefer not to say</li>
          </ul>
        </div>
        <div class="error"></div>
      </div>
      <div id="dob" class="form-field">
        <label>Date of Birth</label>
        <span>{{ user.dob }}</span>
        <input type="date" name="dob" class="!hidden" data-current-value="{{ user.rawDob }}">
        <div class="error"></div>
      </div>
    </form>
    <div class="flex flex-wrap actions mx-2">
      <button type="button" id="edit" class="btn blue compact md:hidden">Edit</button>
      <button type="button" id="cancel" class="btn grey compact mt-4 md:mt-0 md:ml-4 !hidden">Cancel</button>
    </div>
  </div>
</div>
<div id="emails">
  <div class="card">
    <div class="header">
      <span class="title">My Email Addresses</span>
      <span class="subtitle">You can use the following email addresses to sign in to your account and also to reset your password if you ever forget it.</span>
    </div>
    <div class="content">
      <ul class="email-addresses">
        {{#each user.emails}}
          <li>
            <div class="icon">
              <svg viewBox="0 0 24 24">
                <path fill="#fff" d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z"></path>
              </svg>
            </div>
            <div>
              <div class="email mb-1">{{ this.email }}</div>
              <div class="flex badges">
                {{#if this.primary}}
                  <div class="badge bg-success mr-2">Primary</div>
                {{/if}}
                {{#unless this.verified}}
                  <div class="badge bg-warn">Unverified</div>
                {{/unless}}
              </div>
            </div>
            <div class="actions ml-auto flex">
              {{#unless this.verified}}
                <span class="verify">Resend verification email</span>
              {{/unless}}
              {{#unless this.primary}}
                {{#if this.verified}}
                  <span onclick="setAsPrimaryEmailAddress('{{ this.email }}')">Set as Primary address</span>
                {{/if}}
                <svg viewBox="0 0 24 24" onclick="deleteEmailAddress('{{ this.email }}')">
                  <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
                </svg>
              {{/unless}}
            </div>
          </li>
        {{/each}}
      </ul>
      <button id="add-email" class="btn mx-auto">Add Email Address</button>
    </div>
  </div>
</div>

<div id="add-email-modal" class="modal">
  <div class="header">
    <span class="title">Add Email Address</span>
    <div class="close">
      <svg viewBox="0 0 24 24">
        <path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path>
      </svg>
    </div>
  </div>
  <div class="content">
    <div id="new-email" class="form-field mt-0">
      <label class="mb-1">Enter your email address</label>
      <input type="email" name="email" placeholder="Email Address">
      <div class="error"></div>
    </div>
    <button class="btn blue mt-5 mb-2">Add</button>
  </div>
</div>

<div id="email-options" class="modal">
  <div class="header">
    <div class="title"></div>
    <div class="close">
      <svg viewBox="0 0 24 24">
        <path d="M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path>
      </svg>
    </div>
  </div>
  <div class="options">
    <button class="btn resend">
      <svg class="" viewBox="0 0 24 24">
        <path d="M2.01 21 23 12 2.01 3 2 10l15 2-15 2z"></path>
      </svg>
      <span>Resend verification email</span>
    </button>
    <button class="btn set-primary">
      <svg viewBox="0 0 24 24">
        <path d="M12 17.27 18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path>
      </svg>
      <span>Set as Primary address</span>
    </button>
    <button class="btn delete">
      <svg class="fill-error" viewBox="0 0 24 24">
        <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
      </svg>
      <span class="text-error">Delete Email Address</span>
    </button>
  </div>
</div>

<script>
  function validationName(isFirst) {
    const nameRegex = /^[a-zA-Z0-9 \-_\.']+$/;
    const selector = isFirst ? '#firstName' : '#lastName';
    const name = $(`${selector} input`).val().trim();
    let errorMessage = null;
    if (!name && !isFirst) return true;
    else if (!name) errorMessage = 'First name cannot be empty';
    else if (!nameRegex.test(name)) errorMessage = `Please enter a valid ${isFirst ? 'first' : 'last'} name`;
    if (errorMessage) return errorField(selector, errorMessage);
    return true;
  }

  function validateProfilePic() {
    try {
      const url = $('#imageUrl input').val().trim();
      if (!url) return true;
      new URL(url);
      return true;
    } catch (err) {
      return errorField('#imageUrl', 'Please enter a valid URL');
    }
  }

  function validateDOB() {
    const dob = $('#dob input').val().trim();
    if (!dob) return true;
    const dateDiff = new Date().getFullYear() - new Date(dob).getFullYear();
    if (dateDiff < 5) return errorField('#dob', 'Please enter a valid date of birth with a minimum age of 5 years');
    return true;
  }

  function editProfile() {
    const firstName = $('#firstName span').text();
    $('#firstName span').addClass('hidden');
    $('#firstName input').removeClass('!hidden').val(firstName);
    const lastName = $('#lastName span').text();
    $('#lastName span').addClass('hidden');
    $('#lastName input')
      .removeClass('!hidden')
      .val(lastName === '-' ? '' : lastName);
    $('#imageUrl').removeClass('hidden');
    $('#imageUrl input').val($('#imageUrl span').text());
    $('#gender span').addClass('hidden');
    $('#gender input').removeClass('!hidden').data('value', $('#gender input').data('current-value'));
    $('#gender .select svg').removeClass('hidden');
    enableSelect('#gender');
    $('#dob span').addClass('hidden');
    $('#dob input').removeClass('!hidden');
    $('#edit-lg').addClass('!hidden');
    $('#edit').removeClass('md:hidden').text('Save');
    $('#cancel').removeClass('!hidden');
  }

  function saveProfile() {
    let validCounter = 0;
    validCounter += validationName(true);
    validCounter += validationName(false);
    validCounter += validateProfilePic();
    validCounter += validateDOB();
    if (validCounter !== 4) return;

    const update = {};
    const fields = ['firstName', 'lastName', 'imageUrl', 'dob', 'gender'];
    for (const field of fields) {
      const value = getChangedValue(`#${field}`);
      if (value !== null) update[field] = value || null;
    }
    if (update.gender) {
      const gender = parseInt(update.gender);
      update.gender = gender === -1 ? null : gender;
    }

    $('#edit').addClass('loading');
    return $.patch('/user', update)
      .done(data => handleUpdateSuccess(data))
      .fail(err => NotifyError(err.responseJSON.message))
      .always(() => $('#edit').removeClass('loading'));
  }

  function resetProfile() {
    $('#firstName span').removeClass('hidden');
    $('#firstName input').addClass('!hidden');
    $('#lastName span').removeClass('hidden');
    $('#lastName input').addClass('!hidden');
    $('#imageUrl').addClass('hidden');
    $('#gender span').removeClass('hidden');
    $('#gender input').addClass('!hidden').data('value', $('#gender input').data('current-value'));
    $('#gender .select svg').addClass('hidden');
    $('#dob span').removeClass('hidden');
    $('#dob input').addClass('!hidden');
    $('#edit-lg').removeClass('!hidden');
    $('#edit').addClass('md:hidden').text('Edit');
    $('#cancel').addClass('!hidden');
  }

  function handleUpdateSuccess(data) {
    NotifySuccess('Profile updated successfully');
    $('#firstName span').text(data.firstName);
    $('#lastName span').text(data.lastName || '-');
    if (data.imageUrl) $('#imageUrl span').text(data.imageUrl);
    const gender = data.gender === 1 ? 'Male' : data.gender === 2 ? 'Female' : 'Prefer not to say';
    $('#gender span').text(gender);
    $('#gender input').data('current-value', data.gender);
    if (data.dob) {
      const dob = new Date(data.dob);
      const month = dob.toLocaleString('default', { month: 'long' });
      const day = dob.getDate();
      const year = dob.getFullYear();
      $('#dob span').text(`${month} ${day}, ${year}`);
      $('#dob input').data('current-value', data.dob);
    } else $('#dob span').text('-');
    resetProfile();
  }

  function addEmailAddress() {
    const emailRegex = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;
    const email = $('#new-email input').val().trim();
    let errorMessage = null;
    if (!email) errorMessage = 'Please enter your email address';
    else if (!emailRegex.test(email)) errorMessage = 'Please enter a valid email address';
    if (errorMessage) return errorField('#new-email', errorMessage);

    $('#add-email-modal button').addClass('loading');
    return $.post('/user/emails', { email })
      .done(() => {
        const emailElement = $('.email-addresses li').first().clone();
        emailElement.find('.email').text(email);
        emailElement.find('.icon').css('background-color', getRandomColor());
        emailElement.find('.badges').html('<div class="badge bg-warn">Unverified</div>');
        emailElement.find('.actions').html(`<span class="verify">Resend verification email</span>`);
        const svg = $(deleteIcon).on('click', () => deleteEmailAddress(email));
        emailElement.find('.actions').append(svg);
        emailElement.on('click', e => toggleEmailOptionsModal(e.currentTarget));
        $('.email-addresses').append(emailElement);
        NotifySuccess('Email address added successfully');
        closeModal();
      })
      .fail(err => errorField('#new-email', err.responseJSON.message))
      .always(() => $('#add-email-modal button').removeClass('loading'));
  }

  function deleteEmailAddress(email) {
    return $.delete('/user/emails', { email })
      .done(() => {
        const emails = $('.email-addresses li').toArray();
        const index = emails.findIndex(el => $(el).find('.email').text() === email);
        $(emails[index]).remove();
        NotifySuccess('Email address deleted successfully');
        closeModal();
      })
      .fail(err => NotifyError(err.responseJSON.message));
  }

  function setAsPrimaryEmailAddress(email) {
    return $.post('/user/emails/primary', { email })
      .done(() => {
        $('.email-addresses li .badge.bg-success').remove();
        const emails = $('.email-addresses li').toArray();
        const index = emails.findIndex(el => $(el).find('.email').text() === email);
        $(emails[index]).find('.badges').html('<div class="badge bg-success">Primary</div>');
        NotifySuccess('Email address set as primary successfully');
        closeModal();
      })
      .fail(err => NotifyError(err.responseJSON.message));
  }

  function resendVerificationEmail(email) {
    alert('Resend verification email not yet implemented');
    closeModal();
  }

  function toggleEmailOptionsModal(element) {
    if (!isMobile()) return;
    const primary = $(element).find('.badge.bg-success').length > 0;
    if (primary) return;
    const email = $(element).find('.email').text();
    const unverified = $(element).find('.badge.bg-warn').length > 0;
    $('#email-options .header .title').text(email);
    if (unverified) {
      $('#email-options .options .set-primary').addClass('!hidden');
      $('#email-options .options .resend').removeClass('!hidden');
      $('#email-options .options .resend').onlyOn('click', () => resendVerificationEmail(email));
    } else {
      $('#email-options .options .resend').addClass('!hidden');
      $('#email-options .options .set-primary').removeClass('!hidden');
      $('#email-options .options .set-primary').onlyOn('click', () => setAsPrimaryEmailAddress(email));
    }
    $('#email-options .options .delete').onlyOn('click', () => deleteEmailAddress(email));
    toggleModal('#email-options');
  }

  $('ul.email-addresses li .icon').each((_, el) => $(el).css('background-color', getRandomColor()));

  $('#menu-btn').on('click', () => ($('#sidenav').addClass('show'), $('#blur').addClass('nav-blur')));
  $('#add-email').on('click', () => toggleModal('#add-email-modal'));
  $('.email-addresses li').on('click', e => toggleEmailOptionsModal(e.currentTarget));

  $('#edit').on('click', () => ($('#edit').text() === 'Edit' ? editProfile() : saveProfile()));
  $('#edit-lg').on('click', editProfile);
  $('#cancel').on('click', resetProfile);
  $('#add-email-modal button').on('click', addEmailAddress);
</script>